/**
 * For parsing semantic versioning
 * Licensed under the MIT license
 * @module semver
 * @author Aurora01
 * @version v1.0.0-rc1
 */

/**
 * Class representing a semantic version (MAJOR, MINOR, PATCH)
 */
class SemanticVersion {
    func SemanticVersion (self, *args) {
        if len (args) == 1 {
            self.version_string = args [0]
            self._parse_version_string ()
        }
        else if len (args) >= 2 {
            argList = List () + args
            while len (argList) < 4 {
                argList.append (null)
            }
            self._create_version_string (argList [0], argList [1], argList [2], 
                                       argList [3])
        }
        else {
            raise ArgumentException ("Argument exception!")
        }
    }
   
    /**
     * Returns true if the version is an alpha version
     * @returns True if the major is 0
     */ 
    func is_alpha (self) {
        return self.version_major == 0
    }
    
    func _parse_version_string (self) {
        ver = self.version_string
        
        if self.version_string.startswith ("v") {
            ver = self.version_string.substr (1)
        }
        
        verSplit = ver.split ("-")
        versionBase = verSplit [0].split (".")

        if len (verSplit) == 2 {
            self.version_tag = verSplit [1]
        }
        
        for i in range (3) {
            if len (versionBase) <= i {
                versionBase.append (0)
            }
            else {
                versionBase [i] = Int (versionBase [i])
            }
        }
        
        self.version_major = versionBase [0]
        self.version_minor = versionBase [1]
        self.version_patch = versionBase [2]
    }
    
    func _create_version_string (self, major, minor, patch, tag) {
        if patch is Null {
            patch = 0
        }
        fmt = "v{}.{}.{}"
        ver = fmt.format (major, minor, patch)
        if tag isnot Null && tag != "" {
            ver += "-{}".format (tag)
        } 
        self.version_string = ver
        self._parse_version_string ()
    }
    
    /**
     * Tests if this version is greater than the supplied argument
     * @param version The version to compare with
     * @returns True if this version is greater than the supplied argument
     */
    func is_greater_than (self, version) {
        ver = SemanticVersion (version)
        
        if ver.version_major < self.version_major {
            return true
        }
        else if ver.version_major > self.version_major {
            return false
        }
        
        if ver.version_minor < self.version_minor {
            return true
        }
        else if ver.version_minor > self.version_minor {
            return false
        }
        
        if ver.version_patch < self.version_patch {
            return true
        }
        
        return false  
    }
 
    /**
     * Tests whether or not this version is greater than or equal the supplied
     * argument
     * @param version The version to compare with
     * @returns True if this version is greater than or equal to version
     */   
    func is_greater_than_or_equal (self, version) {
        ver = SemanticVersion (version)
        if ver.version_major == self.version_major
           && ver.version_minor == self.version_minor
           && ver.version_patch == self.version_patch {
            return true
        }
        return self.is_greater_than (version)
    }
    
    /**
     * Tests if this version is less than or equal to the supplied argument
     * @param version The version to compare to
     * @returns True if this version is less than or equal to version
     */
    func is_less_than_or_equal (self, version) {
        ver = SemanticVersion (version)
        if ver.version_major == self.version_major
           && ver.version_minor == self.version_minor
           && ver.version_patch == self.version_patch {
            return true
        }
        return self.is_less_than (version)
    }
    
    /**
     * Tests if this version is less than the supplied argument
     * @param version The version to compare to
     * @returns Truee if this version is less than the supplied argument
     */
    func is_less_than (self, version) {
        ver = SemanticVersion (version)
        
        if ver.version_major > self.version_major {
            return true
        }
        else if ver.version_major < self.version_major {
            return false
        }
        
        if ver.version_minor > self.version_minor {
            return true
        }
        else if ver.version_minor < self.version_minor {
            return false
        }
        
        if ver.version_patch > self.version_patch {
            return true
        }
        
        return false
    }
    
    /**
     * Tests if this version is equal to the supplied argument
     * @param ver The version to compare to
     * @returns True if this is equal to ver
     */
    func is_equal (self, ver) {
        v = SemanticVersion (ver)
        if v.version_major == self.version_major && 
           v.version_minor == self.version_minor && 
           v.version_patch == self.version_patch {
            return true
        }
        return false
    }
 
    /**
     * Tests to see if this version matches a semantic version string
     * @param requestedVersion The version string to match
     * @returns True if match
     */   
    func ismatch (self, requestedVersion) {
        if requestedVersion == "*" {
            return true
        }
        
        if requestedVersion.startswith ("~") {
            return self.is_tilde_match (requestedVersion)
        }
        
        if requestedVersion.startswith ("^") {
            return self._is_caret_match (requestedVersion)
        }
        
        reqVer = requestedVersion.split (" ")
        if reqVer.contains ("-") {
            return self.is_range_match (reqVer)
        }
        
        conds = List ()
        
        for v in reqVer {
            if v.startswith (">=") {
                conds.append (self.is_greater_than_or_equal (v.substr (2)))
            }
            else if v.startswith (">") {
                conds.append (self.is_greater_than (v.substr (1)))
            }
            else if v.startswith ("<=") {
                conds.append (self.is_less_than_or_equal (v.substr (2)))
            }
            else if v.startswith ("<") {
                conds.append (self.is_less_than (v.substr (1)))
            }
            else {
                conds.append (self.is_equal (v))
            }
        }
        if !conds.contains (false) {
            return true
        }
        
        return false
    }
    
    func is_range_match (self, reqVer) {
        if len (reqVer) != 3 {
            return false
        }
       
        
        if self.is_greater_than_or_equal (reqVer [0]) && self.is_less_than_or_equal (reqVer [2]) {
            return true
        }
        
        return false
    }
    
    func is_tilde_match (self, requestedVersion) {
        ver = SemanticVersion (requestedVersion.substr (1))
        if ver.version_major == self.version_major &&
           ver.version_minor == self.version_minor &&
           ver.version_patch <= self.version_patch {
            return true    
        }
        return false
    }
    
    func _is_caret_match (self, requestedVersion) {
        ver = SemanticVersion (requestedVersion.substr (1))
        if ver.version_major == self.version_major {
            if ver.version_minor == self.version_minor &&
               ver.version_patch <= self.version_patch {
                return true   
            }
            if ver.version_minor < self.version_minor {
                return true
            }
        }
        return false
    }


    /*
     * Operator overloads
     */

     func __gte__ (self, right) => self.is_greater_than_or_equal (right)

     func __lte__ (self, right) => self.is_less_than_or_equal (right)

     func __lt__ (self, right) => self.is_less_than (right)

     func __gt__ (self, right) => self.is_greater_than (right)

     func __equals__ (self, right) => self.is_equal (right)

     func __notequals__ (self, right) => !self.is_equal (right)
}
